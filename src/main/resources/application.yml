server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: http://config-service:80
      request-connect-timeout: 5000 # 5s
      request-read-timeout: 5000 # 5s
      fail-fast: false # In production, set to true
      retry:
        max-attempts: 6
        initial-interval: 1000 # 1s
        max-interval: 2000 # 2s
        multiplier: 1.1
    gateway:
      httpclient:
        connect-timeout: 2000 # 2s
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
      routes:
        - id: spa-route
          uri: ${SPA_URL:http://polar-ui:80}
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://catalog-service:80}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://order-service:80}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
  data:
    redis:
      connect-timeout: 2s
      host: polar-redis
      port: 6379
      timeout: 1s
  session:
    timeout: 10m
    redis:
      namespace: polar:edge
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid,roles
        provider:
          keycloak:
            issuer-uri: http://abd51a0238f99428382c93555ca43fc5-1208788426.ap-southeast-2.elb.amazonaws.com/realms/PolarBookshop
#            issuer-uri: http://polar-keycloak:80/realms/PolarBookshop

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s


#server:
#  port: 9000
#  netty:
#    connection-timeout: 2s
#    idle-timeout: 15s
#  shutdown: graceful
#
#spring:
#  application:
#    name: edge-service
#  lifecycle:
#    timeout-per-shutdown-phase: 15s
#  config:
#    import: "optional:configserver:"
#  cloud:
#    config:
#      uri: http://config-service:80
#      request-connect-timeout: 5000 # 5s
#      request-read-timeout: 5000 # 5s
#      fail-fast: false # In production, set to true
#      retry:
#        max-attempts: 6
#        initial-interval: 1000 # 1s
#        max-interval: 2000 # 2s
#        multiplier: 1.1
#    gateway:
#      globalcors:
#        cors-configurations:
#          '[/**]':
#            allowedOrigins:
#              - '*' # 허용하려는 도메인
#            allow-credentials: true # 요청 시 인증 정보를 전송하도록 허가
#            allowedHeaders:
#              - Authorization
#              - Authorization-refresh # 허용하려는 헤더
#            allowedMethods: # 허용하려는 HTTP 메서드
#              - PUT
#              - GET
#              - POST
#              - DELETE
#              - OPTIONS
#              - PATCH
#      httpclient:
#        connect-timeout: 2000 # 2s
#        response-timeout: 5s
#        pool:
#          type: elastic
#          max-idle-time: 15s
#          max-life-time: 60s
#      default-filters:
#        - SaveSession
#        - TokenRelay
#        - name: RequestRateLimiter
#          args:
#            redis-rate-limiter:
#              replenishRate: 10
#              burstCapacity: 20
#              requestedTokens: 1
#        - name: Retry
#          args:
#            retries: 3
#            methods: GET
#            series: SERVER_ERROR
#            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
#            backoff:
#              firstBackoff: 50ms
#              maxBackOff: 500ms
#              factor: 2
#              basedOnPreviousValue: false
#      routes:
#        - id: spa-route
#          uri: ${SPA_URL:http://polar-ui:80}
#          predicates:
#            - Path=/,/*.css,/*.js,/favicon.ico
#        - id: catalog-route
#          uri: ${CATALOG_SERVICE_URL:http://catalog-service:80}/books
#          predicates:
#            - Path=/books/**
#          filters:
#            - name: CircuitBreaker
#              args:
#                name: catalogCircuitBreaker
#                fallbackUri: forward:/catalog-fallback
#        - id: order-route
#          uri: ${ORDER_SERVICE_URL:http://order-service:80}/orders
#          predicates:
#            - Path=/orders/**
#          filters:
#            - name: CircuitBreaker
#              args:
#                name: orderCircuitBreaker
#  data:
#    redis:
#      connect-timeout: 2s
#      host: polar-redis
#      port: 6379
#      timeout: 1s
#  session:
#    timeout: 10m
#    redis:
#      namespace: polar:edge
#  security:
#    oauth2:
#      client:
#        registration:
#          keycloak:
#            client-id: edge-service
#            client-secret: polar-keycloak-secret
#            scope: openid,roles
#        provider:
#          keycloak:
#            issuer-uri: http://a1ac45fb8469c4e908fa127aa8d0aeee-1889420468.ap-northeast-2.elb.amazonaws.com/realms/PolarBookshop
##            issuer-uri: http://polar-keycloak:80/realms/PolarBookshop
#
#resilience4j:
#  circuitbreaker:
#    configs:
#      default:
#        slidingWindowSize: 20
#        permittedNumberOfCallsInHalfOpenState: 5
#        failureRateThreshold: 50
#        waitDurationInOpenState: 15000
#  timelimiter:
#    configs:
#      default:
#        timeoutDuration: 5s
#
